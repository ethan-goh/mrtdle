services:
  db:
    image: postgres
    restart: always
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:  
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 1s
    networks:
      - app-network

  backend:
    restart: always
    build: ./backend
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - ./backend:/app
    networks:
      - app-network
    expose:
      - "8000"
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]

  frontend:
    restart: always
    build: ./frontend
    env_file:
      - .env
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - app-network
    command: ["npm", "run", "build"]

  nginx:
    image: nginx:latest
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./frontend/dist:/var/www/html
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
    depends_on:
      - frontend
      - backend
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
